// Generated by CoffeeScript 1.7.1

/*
    serve custom web page to show forecast and current pws stats in bathroom display

    cd /bath
    coffee -cmo lib src/srvr.coffee
 */

(function() {
  var body, cheerio, div, doctype, fileServer, fileSrvrCum, forecastURL, fs, head, html, http, img, lastEmail, mailOptions, nodeStatic, nodemailer, raw, render, request, script, sendWarningEmail, text, title, transporter, url, _ref;

  console.log(process.cwd());

  console.log(__dirname);

  process.chdir('/apps/bath');

  fs = require('fs');

  url = require('url');

  http = require('http');

  request = require('request');

  cheerio = require('cheerio');

  nodeStatic = require('node-static');

  fileServer = new nodeStatic.Server(null, {
    cache: 0
  });

  fileSrvrCum = new nodeStatic.Server('/', {
    cache: 0
  });

  nodemailer = require("nodemailer");

  transporter = nodemailer.createTransport({
    service: "Gmail",
    auth: {
      user: "mark@hahnca.com",
      pass: "GHJlkjert987"
    }
  });

  mailOptions = {
    from: "mark@hahnca.com",
    to: "mark@hahnca.com",
    subject: "Pill warning",
    text: "Pill warning",
    html: "Pill warning"
  };

  lastEmail = 0;

  sendWarningEmail = function() {
    lastEmail = Date.now();
    return transporter.sendMail(mailOptions, function(error, info) {
      if (error) {
        return console.log(error);
      } else {
        return console.log("Message sent: " + info.response);
      }
    });
  };

  _ref = require('teacup'), render = _ref.render, doctype = _ref.doctype, html = _ref.html, head = _ref.head, title = _ref.title, body = _ref.body, div = _ref.div, img = _ref.img, raw = _ref.raw, text = _ref.text, script = _ref.script;

  setInterval(function() {
    var e, flash;
    if (new Date().getHours() === 5) {
      fs.writeFileSync('flash', 'yes');
    }
    try {
      flash = fs.readFileSync('flash', 'utf8');
    } catch (_error) {
      e = _error;
      flash = 'no';
    }
    if (flash === 'yes' && new Date().getHours() > 10 && (Date.now() - lastEmail) > 60 * 60 * 1000) {
      return sendWarningEmail();
    }
  }, 10 * 60 * 1000);

  forecastURL = 'http://www.weather.com/weather/today/33.8404,-118.1863';

  http.createServer(function(req, res) {
    var dateMS, e, flash, _ref1;
    console.log('req:', req.url);
    if (req.url === '/') {
      res.writeHead(200, {
        "Content-Type": "text/html"
      });
      res.end(render(function() {
        doctype();
        return html(function() {
          head(function() {
            return title('forecast - bath');
          });
          return body({
            style: 'background-color:black'
          }, function() {
            div({
              style: 'width:100%; height:1375px'
            }, function() {
              div('#forecast');
              div({
                style: 'clear:both; float:left; width:100%; height:3px; position: relative; top: 0%; background-color:white; margin-top:-2%;'
              });
              div('#current');
              div({
                style: 'clear:both; float:left; width:100%; height:3px; position: relative; top: 0%; background-color:white; margin-top:-2%;'
              });
              return div(function() {
                div('#dow', {
                  style: 'clear:both; float:left; margin:5% 0 0% 12%; color:white'
                });
                return div('#time', {
                  style: 'float:left; margin:5% 0 0% 12%; color:white;'
                });
              });
            });
            script({
              src: 'http://code.jquery.com/jquery-1.11.0.min.js'
            });
            script({
              src: 'lib/teacup.js'
            });
            return script({
              src: 'lib/script.js'
            });
          });
        });
      }));
      return;
    }
    if (req.url === '/forecast') {
      request(forecastURL, function(err, resp, twcHtml) {
        var $, $cont, $parts, chanceRain, hiParts, high, humidity, iconURL, phrase, uv, wind;
        $ = cheerio.load(twcHtml);
        $cont = $('#wx-forecast-container');
        $parts = $cont.find('.wx-data-part');
        if ($parts.length) {
          iconURL = $parts.eq(1).find('img').attr('src');
          high = $parts.eq(4).find('.wx-temperature').text();
          hiParts = /^\d+/.exec(high);
          high = (hiParts ? hiParts[0] + '&deg;' : '');
          phrase = $parts.eq(7).find('.wx-phrase').text();
          chanceRain = $parts.eq(10).text().split('\n')[2];
          $parts = $cont.find('.wx-collapsible').find('.wx-data-part');
          wind = $parts.eq(1).find('.wx-wind-label').text();
          humidity = $parts.eq(4).find('.wx-data').text();
          uv = $parts.eq(7).find('.wx-data').text().replace(' ', '');
        } else {
          $parts = $cont.find('.wx-daypart ');
          if ($parts.length) {
            $parts = $parts.eq(0);
            iconURL = $parts.find('img').attr('src');
            high = $parts.find('.wx-temp').text();
            console.log(high);
            hiParts = /^\s*(\d+)/.exec(high);
            high = (hiParts ? hiParts[1] + '&deg;' : '');
            phrase = $parts.find('.wx-phrase').text();
          } else {
            chanceRain = '??';
            wind = '??';
            humidity = '???';
            uv = '???';
            phrase = '???';
          }
        }
        res.writeHead(200, {
          "Content-Type": "text/json"
        });
        return res.end(JSON.stringify({
          iconURL: iconURL,
          high: high,
          phrase: phrase,
          chanceRain: chanceRain,
          wind: wind,
          humidity: humidity,
          uv: uv
        }));
      });
      return;
    }
    if (req.url.slice(0, 14) === '/cumulus/flash') {
      if (url.parse(req.url, true).query.clear === '1') {
        fs.writeFileSync('flash', 'no');
      }
      try {
        flash = fs.readFileSync('flash', 'utf8');
      } catch (_error) {
        e = _error;
      }
      dateMS = Date.now();
      res.end(JSON.stringify({
        flash: flash,
        dateMS: dateMS
      }));
      return;
    }
    if (req.url.slice(0, 9) === '/cumulus/') {
      req.addListener('end', function() {
        return fileSrvrCum.serve(req, res, function(err) {
          if (err) {
            return console.log('cumulus file server error\n', req.url, err);
          }
        });
      }).resume();
      return;
    }
    if ((_ref1 = req.url) === '/teacup.js' || _ref1 === '/script.js') {
      req.addListener('end', function() {
        return fileServer.serve(req, res, function(err) {
          if (err) {
            return console.log('file server lib error\n', req.url, err);
          }
        });
      }).resume();
      return;
    }
    return req.addListener('end', function() {
      return fileServer.serve(req, res, function(err) {
        var _ref2;
        if (err && ((_ref2 = req.url.slice(-4)) !== '.ico' && _ref2 !== '.map')) {
          return console.log('file server error\n', req.url, err);
        }
      });
    }).resume();
  }).listen(1337);

  console.log('listening on port 1337');

}).call(this);

//# sourceMappingURL=server.map

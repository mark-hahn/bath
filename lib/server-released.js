// Generated by CoffeeScript 1.7.1

/*
    serve custom web page to show forecast and current pws stats in bathroom display

    cd /bath
    coffee -cmo lib src/srvr.coffee
 */

(function() {
  var body, cheerio, div, doctype, fileServer, fileSrvrCum, fs, head, html, http, img, lastEmail, mailOptions, nodeStatic, nodemailer, raw, render, request, script, sendWarningEmail, text, title, transporter, url, _ref;

  process.chdir('/apps/bath');

  fs = require('fs');

  url = require('url');

  http = require('http');

  request = require('request');

  cheerio = require('cheerio');

  nodeStatic = require('node-static');

  fileServer = new nodeStatic.Server(null, {
    cache: 0
  });

  fileSrvrCum = new nodeStatic.Server('/', {
    cache: 0
  });

  nodemailer = require("nodemailer");

  transporter = nodemailer.createTransport({
    service: "Gmail",
    auth: {
      user: "mark@hahnca.com",
      pass: "GHJlkjert987"
    }
  });

  mailOptions = {
    from: "mark@hahnca.com",
    to: "mark@hahnca.com",
    subject: "Pill warning",
    text: "Pill warning",
    html: "Pill warning"
  };

  lastEmail = 0;

  sendWarningEmail = function() {
    lastEmail = Date.now();
    return transporter.sendMail(mailOptions, function(error, info) {
      if (error) {
        return console.log(error);
      } else {
        return console.log("Message sent: " + info.response);
      }
    });
  };

  _ref = require('teacup'), render = _ref.render, doctype = _ref.doctype, html = _ref.html, head = _ref.head, title = _ref.title, body = _ref.body, div = _ref.div, img = _ref.img, raw = _ref.raw, text = _ref.text, script = _ref.script;

  setInterval(function() {
    var e, flash;
    if (new Date().getHours() === 5) {
      fs.writeFileSync('flash', 'yes');
    }
    try {
      flash = fs.readFileSync('flash', 'utf8');
    } catch (_error) {
      e = _error;
      flash = 'no';
    }
    if (flash === 'yes' && new Date().getHours() > 10 && (Date.now() - lastEmail) > 60 * 60 * 1000) {
      return sendWarningEmail();
    }
  }, 10 * 60 * 1000);

  http.createServer(function(req, res) {
    var dateMS, e, flash, forecastURL, _ref1;
    console.log('req:', req.url);
    if (req.url === '/') {
      res.writeHead(200, {
        "Content-Type": "text/html"
      });
      res.end(render(function() {
        doctype();
        return html(function() {
          head(function() {
            return title('forecast - bath');
          });
          return body({
            style: 'background-color:black'
          }, function() {
            div({
              style: 'width:100%; height:1375px'
            }, function() {
              div('#forecast');
              div({
                style: 'clear:both; float:left; width:100%; height:3px; position: relative; top: 9%; background-color:white; margin-top:-2%;'
              });
              div('#current');
              div({
                style: 'clear:both; float:left; width:100%; height:3px; position: relative; top: 0%; background-color:white; margin-top:-2%;'
              });
              return div(function() {
                div('#dow', {
                  style: 'clear:both; float:left; margin:5% 0 0% 12%; color:white'
                });
                return div('#time', {
                  style: 'float:right; margin:5% 9% 0% 0; color:white;'
                });
              });
            });
            script({
              src: 'http://code.jquery.com/jquery-1.11.0.min.js'
            });
            script({
              src: 'lib/teacup.js'
            });
            return script({
              src: 'lib/script.js'
            });
          });
        });
      }));
      return;
    }
    forecastURL = 'http://www.myweather2.com/developer/weather.ashx?uac=Sp.zBdhFxh&uref=0900ec9b-28ee-4d21-92d6-e28b2817bac5&output=json';
    if (req.url === '/forecast') {
      request(forecastURL, function(err, resp, data) {
        var cloudcover, day, fcst, high, humidity, icon, iconURL, matches, phrase, rain, wind, _i, _len, _ref1;
        data = JSON.parse(data);
        _ref1 = data.weather.forecast;
        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
          fcst = _ref1[_i];
          if (Date.now() > new Date(fcst.date).getTime()) {
            break;
          }
        }
        day = fcst.day[0];
        day.weather_text = day.weather_text.replace(/\sskies/ig, '');
        matches = /sunny|rain|clear|cloudy|overcast|drizzle/i.exec(day.weather_text);
        icon = (function() {
          var _ref2;
          switch (matches != null ? (_ref2 = matches[0]) != null ? _ref2.toLowerCase() : void 0 : void 0) {
            case 'sunny':
            case 'clear':
              return 'clear';
            case 'cloudy':
              return 'clouds';
            case 'overcast':
              return 'many-clouds';
            case 'drizzle':
              return 'showers-scattered';
            case 'rain':
              return 'showers';
            default:
              return 'storm-night';
          }
        })();
        iconURL = '/lib/icons/Status-weather-' + icon + '-icon.png';
        rain = wind = humidity = cloudcover = phrase = high = '???';
        rain = Math.floor(day.precip_mm / 25.4);
        wind = day.wind.speed;
        humidity = day.humidity;
        cloudcover = day.cloudcover;
        phrase = day.weather_text;
        high = fcst.day_max_temp * 9 / 5 + 32;
        res.writeHead(200, {
          "Content-Type": "text/json"
        });
        return res.end(JSON.stringify({
          iconURL: iconURL,
          high: high,
          phrase: phrase,
          rain: rain,
          wind: wind,
          humidity: humidity,
          cloudcover: cloudcover
        }));
      });
      return;
    }
    if (req.url.slice(0, 14) === '/cumulus/flash') {
      if (url.parse(req.url, true).query.clear === '1') {
        fs.writeFileSync('flash', 'no');
      }
      try {
        flash = fs.readFileSync('flash', 'utf8');
      } catch (_error) {
        e = _error;
      }
      dateMS = Date.now();
      res.end(JSON.stringify({
        flash: flash,
        dateMS: dateMS
      }));
      return;
    }
    if (req.url.slice(0, 9) === '/cumulus/') {
      req.addListener('end', function() {
        return fileSrvrCum.serve(req, res, function(err) {
          if (err) {
            return console.log('cumulus file server error\n', req.url, err);
          }
        });
      }).resume();
      return;
    }
    if ((_ref1 = req.url) === '/teacup.js' || _ref1 === '/script.js') {
      req.addListener('end', function() {
        return fileServer.serve(req, res, function(err) {
          if (err) {
            return console.log('file server lib error\n', req.url, err);
          }
        });
      }).resume();
      return;
    }
    if (req.url.slice(0, 7) === '/icons/') {
      req.addListener('end', function() {
        return fileServer.serve(req, res, function(err) {
          if (err) {
            return console.log('file server lib error\n', req.url, err);
          }
        });
      }).resume();
      return;
    }
    return req.addListener('end', function() {
      return fileServer.serve(req, res, function(err) {
        var _ref2;
        if (err && ((_ref2 = req.url.slice(-4)) !== '.ico' && _ref2 !== '.map')) {
          return console.log('file server error\n', req.url, err);
        }
      });
    }).resume();
  }).listen(1337);

  console.log('listening on port 1337');


  /*
            tu  we  th
  wund web  85  87  83
  accuwthr  85  85  83
  mywthr2   84  88  84
  google    84  86  86
  weather2  82  89  84
  wthrchan  80  84  82
  wund api  80  83  82
  willywthr 80  82  79
  intlicast 79  85  82
  frcst.io  75  78  79
  wthrbug   75  75  75
  openwthr  70  70  70
   */

}).call(this);

//# sourceMappingURL=server.map
